generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  JWT
  AUTH0
}

model User {
  id                 String       @unique @default(uuid())
  username           String       @unique
  full_name          String
  email              String       @unique
  password           String? // Optional so we can work with auth0
  authProvider       AuthProvider @default(JWT)
  birth_date         DateTime? // Optional momentarily to work with auth0
  alias_mp           String?      @unique
  is_admin           Boolean      @default(false)
  is_active          Boolean      @default(false)
  is_banned          Boolean      @default(false)
  last_access        DateTime     @default(now())
  verification_token String?
  url_avatar         String       @default("https://res.cloudinary.com/drgqlk8l3/image/upload/v1661876193/fepyrsp3x3qqj5zb0qhd.jpg")

  tournament_userid  UserTournament[]
  predictions_userid Predictions[]
  creator            Tournament[]
  comments_userid    Comments?
  banned_reason      Banned?
}

model Tournament {
  id          String         @unique @default(uuid())
  name        String         @unique
  description String
  user_limit  Int?
  status      Status         @default(INCOMING)
  type        TournamentType @default(PUBLIC)
  password    String?
  pool        Int            @default(0)
  logo_url    String?
  is_official Boolean        @default(false)

  creator         User             @relation(fields: [creator_user_id], references: [id])
  creator_user_id String
  matches         Matches[]
  predictions     Predictions[]
  tournament      UserTournament[]
}

enum MatchStage {
  ROUNDOF32A1
  ROUNDOF32A2
  ROUNDOF32A3
  ROUNDOF32A4
  ROUNDOF32A5
  ROUNDOF32A6
  ROUNDOF32A7
  ROUNDOF32A8
  ROUNDOF32B1
  ROUNDOF32B2
  ROUNDOF32B3
  ROUNDOF32B4
  ROUNDOF32B5
  ROUNDOF32B6
  ROUNDOF32B7
  ROUNDOF32B8
  ROUNDOF16A1
  ROUNDOF16A2
  ROUNDOF16A3
  ROUNDOF16A4
  ROUNDOF16B1
  ROUNDOF16B2
  ROUNDOF16B3
  ROUNDOF16B4
  QUARTERFINALA1
  QUARTERFINALA2
  QUARTERFINALB1
  QUARTERFINALB2
  SEMIFINALA
  SEMIFINALB
  FINAL
}

enum TournamentType {
  PRIVATE
  PUBLIC
}

enum Status {
  INCOMING
  INPROGRESS
  CONCLUDED
}

enum TournamentPosition {
  FIRST
  SECOND
  THIRD
}

model UserTournament {
  id                String              @unique @default(uuid())
  score             Int                 @default(0)
  position          TournamentPosition?
  compensation      Int                 @default(0)
  collected_payment Boolean             @default(false)

  winner         Teams?     @relation(fields: [winner_team_id], references: [id])
  winner_team_id String?
  user           User       @relation(fields: [user_id], references: [id])
  user_id        String
  tournament     Tournament @relation(fields: [tournament_id], references: [id])
  tournament_id  String

  @@id([user_id, tournament_id])
}

model Teams {
  id         String  @unique @default(uuid())
  name       String  @unique
  shield_url String?

  id_team_a      Matches[]        @relation("team_a")
  id_team_b      Matches[]        @relation("team_b")
  UserTournament UserTournament[]
}

model Predictions {
  id      String @unique @default(uuid())
  score_a Int
  score_b Int

  match         Matches    @relation(fields: [match_id], references: [id])
  match_id      String
  user          User       @relation(fields: [user_id], references: [id])
  user_id       String
  tournament    Tournament @relation(fields: [tournament_id], references: [id])
  tournament_id String

  @@id([user_id, tournament_id, match_id])
}

model Matches {
  id      String     @unique @default(uuid())
  score_a Int?
  score_b Int?
  date    DateTime
  stage   MatchStage

  tournament    Tournament    @relation(fields: [tournament_id], references: [id])
  tournament_id String
  team_a        Teams         @relation(name: "team_a", fields: [team_a_id], references: [id])
  team_a_id     String
  team_b        Teams         @relation(name: "team_b", fields: [team_b_id], references: [id])
  team_b_id     String
  match_id      Predictions[]
}

model Comments {
  id          String @unique @default(uuid())
  stars       Int
  comentaries String
  titulo      String
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String @unique
}

model Banned {
  id         Int     @id @default(autoincrement())
  admin_name String
  reason     String?
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String  @unique
}
